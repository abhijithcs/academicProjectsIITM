//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;



/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	int MAX=1000;
	int call_flag=0,label_flag=0;
	String s1="";
	Stack <String> store= new Stack <String>() ; 
	
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
        	 if(call_flag==1)
       		  s1=s1.concat(" "+ e.nextElement().accept(this));
       	  	else
       		  e.nextElement().accept(this);
        
        	 _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      System.out.print(n.f0.toString()+"\n"); //MAIN
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      System.out.print("\n"+n.f2.toString());//END
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      String e;
      
      System.out.print("\n"+n.f0.f0.toString());//NewLine
      System.out.print(" ["+n.f2.f0.toString()+"]");
      System.out.print("\nBEGIN\n");//BEGIN
      e=n.f4.accept(this).toString();
      System.out.print("\nRETURN "+e);
      System.out.print("\nEND\n");//BEGIN
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      System.out.print(" NOOP\n");
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> " ERROR\n"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      String e1;
      e1=n.f1.accept(this).toString();
      System.out.print("\nCJUMP "+e1+" "+n.f2.f0.toString());
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      System.out.print(" "+n.f0.toString()+" ");
      n.f0.accept(this);
      //n.f1.accept(this);
      System.out.print(" "+n.f1.f0.toString()+"\n");
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      String e1,e2;
      call_flag=0;
      e1=n.f1.accept(this).toString();
      e2=n.f3.accept(this).toString();
      call_flag=1;
      System.out.print("\nHSTORE "+e1+" "+n.f2.f0.toString()+" "+e2);//HSTORE
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      String e1,e2;
      call_flag=0;
      e1=n.f1.accept(this).toString();
      e2=n.f2.accept(this).toString();
      call_flag=1;
      n.f0.accept(this);
      System.out.print("\nHLOAD "+e1+" "+e2+" "+n.f3.f0.toString());//HLOAD
      
      //n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      String e1,e2;
      e1=n.f2.accept(this).toString();
      System.out.print("\nMOVE");//MOVE
      n.f0.accept(this);
      e2=n.f1.accept(this).toString();
      System.out.print(" "+e2+" "+e1);
      
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      String e1;
      e1=n.f1.accept(this).toString();
      System.out.print("\nPRINT "+e1);
      
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n) {
      R _ret=null;
      label_flag=1;
      String e1;
      e1=n.f0.accept(this).toString();
      //if(call_flag==1)
    	 // s1=s1.concat(" "+e1);
      return (R) (e1);
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      String e1="%TEMP%";
      call_flag=0;
      String e2=n.f3.accept(this).toString();
      call_flag=1;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      //n.f3.accept(this);
      System.out.print("\n");
      n.f4.accept(this);
      label_flag=0;
      return (R) (e2);
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      String e="TEMP";
      String e1;
      e1=n.f1.accept(this).toString();
      
      call_flag=1;
      s1="";
      n.f3.accept(this);
      store.push(s1);
      call_flag=0;
      n.f0.accept(this);
         
      System.out.print("\nMOVE TEMP "+MAX+" CALL "+e1);
      n.f2.accept(this);
      System.out.print("(");
      System.out.print(store.pop()+" ");
      n.f4.accept(this);
      System.out.print(")");
      
      e=e.concat(" "+MAX);
      MAX++;
      label_flag=0;
      
      return (R) (e);
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      String e1="HALLOCATE";
      String e2;
      e2=n.f1.accept(this).toString();
      e1=e1.concat(" "+e2);
      n.f0.accept(this);
      label_flag=0;
      return (R) (e1);
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      String e="TEMP";
      String e1,e2,o1;
      call_flag=0;
      e1=n.f1.accept(this).toString();
      e2=n.f2.accept(this).toString();
      call_flag=1;
      o1=n.f0.accept(this).toString();
      System.out.print("\nMOVE TEMP "+MAX+" "+o1+" "+e1+" "+e2);
      e=e.concat(" "+MAX);
      MAX++;
      label_flag=0;
      return (R) (e);
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      String s=n.f0.choice.toString();
      n.f0.accept(this);
      label_flag=0;
      return (R) (s);
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
      R _ret=null;
      String e1="TEMP";
      //call_flag=0;
      e1=e1.concat(" "+n.f1.f0.toString()); //TEMP
      
      n.f0.accept(this);
      //n.f1.accept(this);
      label_flag=0;
      return (R) (e1);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      String e1="TEMP";
      System.out.print("\nMOVE TEMP "+MAX+" "+n.f0.toString());
      e1=e1.concat(" "+MAX);
      MAX++;
      n.f0.accept(this);
      label_flag=0;
      return (R) (e1);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      String e1="TEMP";
      if(label_flag==1)
      {
    	  System.out.print("\n MOVE TEMP "+MAX+" "+n.f0.toString());//LABEL
    	  e1=e1.concat(" "+MAX);
    	  MAX++;
    	  
    	  return (R) (e1);
      }
      else
      {
    	  System.out.print(" "+n.f0.toString());
    	  return _ret;
      }
      
     }

}
